Complete BDD Cucumber [java] framework design:

Step1: Create a Maven project 
select maven-archetype-quickstart template , and provide groupId , artifactId 
click on Finish a project will get created

**************************************************************************************************************
Step2: go to pom.xml
remove junit dependencies
go to maven repo - and add below 3 dependecies [for cucumber ,cucumber-java][to run tests - cucumber-testng] [for selenium - selenium-java ]

search cucumber jvm java 
<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
<dependency>
    <groupId>io.cucumber</groupId>
    <artifactId>cucumber-java</artifactId>
    <version>7.4.1</version>
</dependency>

search cucumber jvm testng - dont add plain testng dependecy
<!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng -->
<dependency>
    <groupId>io.cucumber</groupId>
    <artifactId>cucumber-testng</artifactId>
    <version>7.4.1</version>
</dependency>

search selenium java 
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.1.4</version>
</dependency>

<!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
<dependency>
    <groupId>io.github.bonigarcia</groupId>
    <artifactId>webdrivermanager</artifactId>
    <version>5.2.1</version>
</dependency>

**************************************************************************************************************
Step3: lets start automating a testcase - Search Product
validate search results are consistent

In cucumber all features are created in feature file
Create a package inside src/test/java - features 
inside features package - create a file searchProduct.feature

inside the feature file , the first step to be written  is heading , highlighting what this feature file is all about
Feature: Search and Place the order of products

Then define different Scenario to be tested

Scenario: Search Experience of Product search in both home and Offers page

Then define the Given When Then
Given - precondition , before the user perform any action
When - the user action
Then - validate the result

Given User is on GreenCart Landing page

Finally our searchProduct.feature file looks as below

Feature: Search and Place the order of products


Scenario: Search Experience of Product search in both home and Offers page
Given User is on GreenCart Landing page
When User searched with shortname "tom" and extracted actual name of product
Then User searched for "tom" shortname in offers page 
And validate product name in offers page matches with landing page 
**************************************************************************************************************
Step4: create cucumber step definition, features and Test Runner skeleton files

inside src/test/java - create a package stepDefinitions
inside this package , create a class - GreenKartStepDefinition

inside src/test/java - create a new package - cucumberOptions
create a class TestNGTestRunner

package cucumberOptions;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions(features="src/test/java/features",glue="stepDefinitions",monochrome=true,dryRun=true)

public class TestNGTestRunner extends AbstractTestNGCucumberTests{

}

Now run the runner class , as we have given dryRun true it will show all the undefined step definition , and use them to create step definition methods
**************************************************************************************************************
Step5: now code the step definition file


package stepDefinitions;

import java.util.Iterator;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.github.bonigarcia.wdm.WebDriverManager;

public class GreenKartStepDefinition {

	public WebDriver driver;
	public String landingPageProductName;
	public String offerPageProductName;

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
	}

	@When("User searched with shortname {string} and extracted actual name of product")
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String string) throws InterruptedException {
		driver.findElement(By.xpath("//input[@type='search']")).sendKeys("tom");
		Thread.sleep(2000);
		landingPageProductName = driver.findElement(By.cssSelector("h4.product-name")).getText().split("-")[0].trim();
		System.out.println(landingPageProductName + " is extracted from homePage");
	}

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {
		driver.findElement(By.linkText("Top Deals")).click();
		Set<String> s1 = driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		driver.switchTo().window(childWindow);

		driver.findElement(By.xpath("//input[@type='search']")).sendKeys(shortName);
		Thread.sleep(2000);
		offerPageProductName = driver.findElement(By.cssSelector("tr td:nth-child(1)")).getText();
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, landingPageProductName);
	}
}

remove the dryRun parameter from TestNGRunner 
**************************************************************************************************************
Real time problems in breaking the step definitions code into multiple files:

Each page may so have so many functionalities , thus many stepDefinition files will be written
if something goes wrong then it will be hard to maintain

so divide the step definitions based on the web pages , so that activities we perform on the page have a corresponding step Definition

Rename the above created stepDefinition to LandingPageStepDefinition

create a OfferPageStepDefinition java class
then remove all the code that belongs to OffersPage from the LandingPage stepDefinition file



the 2 classes are divided with stepDefintion code of their respective pages

public class LandingPageStepDefinition {

	public WebDriver driver;
	public String landingPageProductName;
	public String offerPageProductName;

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
		driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
	}

	@When("User searched with shortname {string} and extracted actual name of product")
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String string)
			throws InterruptedException {
		driver.findElement(By.xpath("//input[@type='search']")).sendKeys("tom");
		Thread.sleep(2000);
		landingPageProductName = driver.findElement(By.cssSelector("h4.product-name")).getText().split("-")[0].trim();
		System.out.println(landingPageProductName + " is extracted from homePage");
	}

}

public class OffersPageStepDefinition {

	public WebDriver driver;
	public String landingPageProductName;
	public String offerPageProductName;

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {
		driver.findElement(By.linkText("Top Deals")).click();
		Set<String> s1 = driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		driver.switchTo().window(childWindow);

		driver.findElement(By.xpath("//input[@type='search']")).sendKeys(shortName);
		Thread.sleep(2000);
		offerPageProductName = driver.findElement(By.cssSelector("tr td:nth-child(1)")).getText();
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, landingPageProductName);
	}
}

Now when we try to run the Runner , in LandingPageStepDefinition this will run ,but in OffersPageStepDefinition there is no where
driver intialized , so it will give a java.lang.NullPointerException: and also we need the landingPageProductName; value initialized 
in LandingPageStepDefinition to be accessed in OffersPageStepDefinition

Here comes need of dependency Injection

**************************************************************************************************************
What is Cucumber Dependency Injection? - use picocontainer

There are  different ways , to do this for cucumber we need a dependency
cucumber picocontainer

<dependency>
    <groupId>io.cucumber</groupId>
    <artifactId>cucumber-picocontainer</artifactId>
    <version>7.4.1</version>
</dependency>


inside src/test/java - create a package utils 
inside utils package , create a class TestContextSetup
and we should tell in it what are the properties that we need to share among stepdefinition

Then go to stepDefinition files and create a constructor with a TextContextSetup instance

Whatever instances to be shared among stepDefintions , declare them in the TextContextSetup class
Then in the stepDefinitions classes , create a constructor with parameter of TextContextSetup instance
and declare an instance varibale of the TextContextSetup
Then call the varibales that needs to shared using the TextContextSetup reference 

step1:
package utils;

import org.openqa.selenium.WebDriver;

public class TestContextSetup {

	//tell what to be shared among stepDefinition files
	public WebDriver driver;
	public String landingPageProductName;
}


import java.util.Iterator;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.github.bonigarcia.wdm.WebDriverManager;
import utils.TestContextSetup;

public class LandingPageStepDefinition {

	public WebDriver driver;
	public String landingPageProductName;
	
	
	TestContextSetup testContextSetup; //----------------------------------------------------------------------------------Step2
	public LandingPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	} //-------------------------------------------------------------------------------------------------------------------step2

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		WebDriverManager.chromedriver().setup();
		testContextSetup.driver = new ChromeDriver();  //--------------------------------------------------------step3
		testContextSetup.driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");  //--------------------------------------------------------step3
	}

	@When("User searched with shortname {string} and extracted actual name of product")
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String string)
			throws InterruptedException {
		testContextSetup.driver.findElement(By.xpath("//input[@type='search']")).sendKeys("tom");//--------------------------------------------------------step3
		Thread.sleep(2000);
		testContextSetup.landingPageProductName = testContextSetup.driver.findElement(By.cssSelector("h4.product-name")).getText().split("-")[0].trim();//--------------------------------------------------------step3
		System.out.println(landingPageProductName + " is extracted from homePage");
	}

}

public class OffersPageStepDefinition {

	public String offerPageProductName;

	public TestContextSetup testContextSetup;

	public OffersPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {
		testContextSetup.driver.findElement(By.linkText("Top Deals")).click();
		Set<String> s1 = testContextSetup.driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		testContextSetup.driver.switchTo().window(childWindow);

		testContextSetup.driver.findElement(By.xpath("//input[@type='search']")).sendKeys(shortName);
		Thread.sleep(2000);
		offerPageProductName = testContextSetup.driver.findElement(By.cssSelector("tr td:nth-child(1)")).getText();
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, testContextSetup.landingPageProductName);
	}
}

**************************************************************************************************************
Importance of Single responsibility principle and loosely coupled classes:

Write classes lossely coupled, each class must have a single responsibility 


in the below class we can see that the code to switch tabs is written in a step definition method, which makes it tightly coupled 
our method should focus mainly on the validation or the main reason for that method


public class OffersPageStepDefinition {

	public String offerPageProductName;

	public TestContextSetup testContextSetup;

	public OffersPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {
		testContextSetup.driver.findElement(By.linkText("Top Deals")).click();
		Set<String> s1 = testContextSetup.driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		testContextSetup.driver.switchTo().window(childWindow);

		testContextSetup.driver.findElement(By.xpath("//input[@type='search']")).sendKeys(shortName);
		Thread.sleep(2000);
		offerPageProductName = testContextSetup.driver.findElement(By.cssSelector("tr td:nth-child(1)")).getText();
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, testContextSetup.landingPageProductName);
	}
}

we can change the class stepDefinitions as below
thus following Single responsibility principle

public class OffersPageStepDefinition {

	public String offerPageProductName;

	public TestContextSetup testContextSetup;

	public OffersPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {

		switchToOffersPage();
		testContextSetup.driver.findElement(By.xpath("//input[@type='search']")).sendKeys(shortName);
		Thread.sleep(2000);
		offerPageProductName = testContextSetup.driver.findElement(By.cssSelector("tr td:nth-child(1)")).getText();
	}

	public void switchToOffersPage() {
//we can also add code to validate , if we are on the same page we want or not
		testContextSetup.driver.findElement(By.linkText("Top Deals")).click();
		Set<String> s1 = testContextSetup.driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		testContextSetup.driver.switchTo().window(childWindow);
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, testContextSetup.landingPageProductName);
	}
}




**************************************************************************************************************
Page Object Patterns:

All the element locators , should be not there in the test stepDefinitions , instead create seperate java classes 
for each file , to have the web elements of the page

create a package 
pageObjects
create class - LandingPage and OffersPage



package pageObjects;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class LandingPage {
	
	public WebDriver driver;
	public LandingPage(WebDriver driver) {
		this.driver = driver;
	}

	By search = By.xpath("//input[@type='search']");
	By productName = By.cssSelector("h4.product-name");
	By topDeals = By.linkText("Top Deals");
	
	public void searchItem(String name) {
		driver.findElement(search).sendKeys(name);
	}
	
	public String getProductName() {
		return driver.findElement(productName).getText();
	}
	
	public void selectTopDeals() {
		driver.findElement(topDeals).click();
	}
}

package pageObjects;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class OffersPage {

	public WebDriver driver;
	
	public OffersPage(WebDriver driver) {
		this.driver = driver;
	}
	
	By search = By.xpath("//input[@type='search']");
	By productName = By.cssSelector("tr td:nth-child(1)");
	
	public void searchItem(String name) {
		driver.findElement(search).sendKeys(name);
	}
	
	public String getProductName() {
		return driver.findElement(productName).getText();
	}
}

package stepDefinitions;

import java.util.Iterator;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.github.bonigarcia.wdm.WebDriverManager;
import pageObjects.LandingPage;
import utils.TestContextSetup;

public class LandingPageStepDefinition {

	public WebDriver driver;
	public String landingPageProductName;
	
	
	TestContextSetup testContextSetup;
	public LandingPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		WebDriverManager.chromedriver().setup();
		testContextSetup.driver = new ChromeDriver();
		testContextSetup.driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
	}

	@When("User searched with shortname {string} and extracted actual name of product")
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String shortName)
			throws InterruptedException {
		
		LandingPage landingPage = new LandingPage(testContextSetup.driver);
		landingPage.searchItem(shortName);
		
		Thread.sleep(2000);
		testContextSetup.landingPageProductName = landingPage.getProductName().split("-")[0].trim();
		System.out.println(landingPageProductName + " is extracted from homePage");
	}

}

package stepDefinitions;

import java.util.Iterator;
import java.util.Set;

import org.openqa.selenium.By;
import org.testng.Assert;

import io.cucumber.java.en.Then;
import pageObjects.LandingPage;
import pageObjects.OffersPage;
import utils.TestContextSetup;

public class OffersPageStepDefinition {

	public String offerPageProductName;

	public TestContextSetup testContextSetup;

	public OffersPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {

		switchToOffersPage();
		OffersPage offersPage = new OffersPage(testContextSetup.driver);
		offersPage.searchItem(shortName);;
		Thread.sleep(2000);
		offerPageProductName = offersPage.getProductName();
	}

	public void switchToOffersPage() {
		LandingPage landingPage = new LandingPage(testContextSetup.driver);
		landingPage.selectTopDeals();
		Set<String> s1 = testContextSetup.driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		testContextSetup.driver.switchTo().window(childWindow);
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, testContextSetup.landingPageProductName);
	}
}

**************************************************************************************************************
Factory Design pattern implementation for creating Page objects with example:

A single class responsible for creating all the objects of the page classes
create a class inside pageObjects package , PageObjectManager.java

create all objects in PageObjectManager
then create object of the PageObjectManager , inside TestContextSetup class [using dependency Injection]



package pageObjects;

import org.openqa.selenium.WebDriver;

public class PageObjectManager {

	// Factory Design Pattern : we will create objects of all the classes in this
	// class , so called factory design pattern

	public LandingPage landingPage;
	public OffersPage offersPage;
	public WebDriver driver;

	public PageObjectManager(WebDriver driver) {
		this.driver = driver;
	}

	public LandingPage getLandingPage() {
		landingPage = new LandingPage(driver);
		return landingPage;
	}

	public OffersPage getOffersPage() {
		offersPage = new OffersPage(driver);
		return offersPage;
	}
}



import org.openqa.selenium.WebDriver;

import pageObjects.PageObjectManager;

public class TestContextSetup {

	// tell what to be shared among stepDefinition files
	public WebDriver driver;
	public String landingPageProductName;
	public PageObjectManager pageObjectManager;

	public TestContextSetup() {
		pageObjectManager = new PageObjectManager(driver);
	}
}



import java.util.Iterator;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.github.bonigarcia.wdm.WebDriverManager;
import pageObjects.LandingPage;
import utils.TestContextSetup;

public class LandingPageStepDefinition {

	public WebDriver driver;
	public String landingPageProductName;
	
	
	TestContextSetup testContextSetup;
	public LandingPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		WebDriverManager.chromedriver().setup();
		testContextSetup.driver = new ChromeDriver();
		testContextSetup.driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
	}

	@When("User searched with shortname {string} and extracted actual name of product")
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String shortName)
			throws InterruptedException {
		
		LandingPage landingPage = testContextSetup.pageObjectManager.getLandingPage();
		landingPage.searchItem(shortName);
		
		Thread.sleep(2000);
		testContextSetup.landingPageProductName = landingPage.getProductName().split("-")[0].trim();
		System.out.println(landingPageProductName + " is extracted from homePage");
	}

}

package stepDefinitions;

import java.util.Iterator;
import java.util.Set;

import org.openqa.selenium.By;
import org.testng.Assert;

import io.cucumber.java.en.Then;
import pageObjects.LandingPage;
import pageObjects.OffersPage;
import pageObjects.PageObjectManager;
import utils.TestContextSetup;

public class OffersPageStepDefinition {

	public String offerPageProductName;
	public TestContextSetup testContextSetup;
	public PageObjectManager pageObjectManager;
	
	public OffersPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Then("User searched for {string} shortname in offers page")
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {

		switchToOffersPage();
//		OffersPage offersPage = new OffersPage(testContextSetup.driver);
		OffersPage offersPage = testContextSetup.pageObjectManager.getOffersPage();
		offersPage.searchItem(shortName);;
		Thread.sleep(2000);
		offerPageProductName = offersPage.getProductName();
	}

	public void switchToOffersPage() {
		//use the object created inside the dependency manager
		LandingPage landingPage = testContextSetup.pageObjectManager.getLandingPage();
		landingPage.selectTopDeals();
		Set<String> s1 = testContextSetup.driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		testContextSetup.driver.switchTo().window(childWindow);
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, testContextSetup.landingPageProductName);
	}
}
****************************************************************************************************************************************************************************************************************************
Build generic test utilities and pass driver in constructor from Context file:

Driver initialization must be in a seperate file, as we need it in all stepDefinition file

inside utils package, create a class TestBase


public class TestBase {

	public WebDriver driver;

	public WebDriver WebDriverManager() {

		if (driver == null) {

			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();
			driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
		}
		return driver;
	}
}
Then pass this above driver to TestContextSetup class

public class TestContextSetup {

	// tell what to be shared among stepDefinition files
	public WebDriver driver;
	public String landingPageProductName;
	public PageObjectManager pageObjectManager;
	public TestBase testBase;

	public TestContextSetup() {
		testBase = new TestBase();
		pageObjectManager = new PageObjectManager(testBase.WebDriverManager());
	}
}


Whatever the generic code , we can have them in seperate files , so that to be reused everywhere

create a GenericUtils class in utils package

public class GenericUtils {
	
	public WebDriver driver;
	public GenericUtils(WebDriver driver) {
		this.driver = driver;
	}

	public void switchWindowToChild() {
		Set<String> s1 = driver.getWindowHandles();
		Iterator<String> i1 = s1.iterator();
		String parentWindow = i1.next();
		String childWindow = i1.next();
		driver.switchTo().window(childWindow);
	}
}

public class TestContextSetup {

	// tell what to be shared among stepDefinition files
	public WebDriver driver;
	public String landingPageProductName;
	public PageObjectManager pageObjectManager;
	public TestBase testBase;
	public GenericUtils genericUtils;//---<
	
	public TestContextSetup() {
		testBase = new TestBase();
		pageObjectManager = new PageObjectManager(testBase.WebDriverManager());
		genericUtils = new GenericUtils(testBase.WebDriverManager());//<--------
	}
}

now we can use this generic method in stepDefinition

	public void switchToOffersPage() {
		//use the object created inside the dependency manager
		LandingPage landingPage = testContextSetup.pageObjectManager.getLandingPage();
		landingPage.selectTopDeals();
		testContextSetup.genericUtils.switchWindowToChild();//<----------------
	}



**************************************************************************************************************
Create Global properties file , to drive browser and url

create a package under src/test/ , resources
create a file global.properties

browser=chrome
QAUrl=https://rahulshettyacademy.com/seleniumPractise/#/

public class TestBase {

	public WebDriver driver;

	public WebDriver WebDriverManager() throws IOException {

		FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"\\src\\test\\resources\\global.properties");
		Properties properties = new Properties();
		properties.load(fis);
		String url = properties.getProperty("QAUrl");
		
		if (driver == null) {
			if(properties.getProperty("browser").equalsIgnoreCase("chrome")) {
				WebDriverManager.chromedriver().setup();
				driver = new ChromeDriver();
			}else if(properties.getProperty("browser")=="edge") {
				WebDriverManager.edgedriver().setup();
				driver = new EdgeDriver();
			}
			
			driver.get(url);
		}
		return driver;
	}
}


**************************************************************************************************************
Implement Cucumber hooks , to add post condition steps to close browser:


inside stepDefinitions  package create a class Hooks.java

import java.io.IOException;
import io.cucumber.java.After;
import utils.TestContextSetup;

public class Hooks {

	TestContextSetup testContextSetup;

	public Hooks(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}
	// runs after each Scenario
	@After
	public void AfterScenario() throws IOException {
		testContextSetup.testBase.WebDriverManager().quit();
	}
}

**************************************************************************************************************
Parameterize the selenium tests with multiple data sets using Scenario outline:

change the Scenario to Scenario Outline , and use Examples keyword , with the name specifying in angular brackets

Feature: Search and Place the order of products


#Scenario: Search Experience of Product search in both home and Offers page
#Given User is on GreenCart Landing page
#When User searched with shortname "tom" and extracted actual name of product
#Then User searched for "tom" shortname in offers page 
#And validate product name in offers page matches with landing page



Scenario Outline: Search Experience of Product search in both home and Offers page
Given User is on GreenCart Landing page
When User searched with shortname <Name> and extracted actual name of product
Then User searched for <Name> shortname in offers page 
And validate product name in offers page matches with landing page

Examples:
| Name |
| Tom  |
| Beet |

Then make changes in the stepDefinition methods


public class LandingPageStepDefinition2 {

	public WebDriver driver;
	public String landingPageProductName;
	
	
	TestContextSetup testContextSetup;
	public LandingPageStepDefinition2(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		
	}

	@When("^User searched with shortname (.+) and extracted actual name of product$") //<----------------------------------------
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String shortName)
			throws InterruptedException {
		
		LandingPage landingPage = testContextSetup.pageObjectManager.getLandingPage();
		landingPage.searchItem(shortName);
		
		Thread.sleep(4000);
		testContextSetup.landingPageProductName = landingPage.getProductName().split("-")[0].trim();
		System.out.println(testContextSetup.landingPageProductName + " is extracted from homePage");
	}

}



public class OffersPageStepDefinition2 {

	public String offerPageProductName;
	public TestContextSetup testContextSetup;
	public PageObjectManager pageObjectManager;
	
	public OffersPageStepDefinition2(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
	}

	@Then("^User searched for (.+) shortname in offers page$")//<------------------------------
	public void user_searched_for_same_shortname_in_offers_page(String shortName) throws InterruptedException {

		switchToOffersPage();
//		OffersPage offersPage = new OffersPage(testContextSetup.driver);
		OffersPage offersPage = testContextSetup.pageObjectManager.getOffersPage();
		offersPage.searchItem(shortName);;
		Thread.sleep(4000);
		offerPageProductName = offersPage.getProductName();
	}

	public void switchToOffersPage() {
		//use the object created inside the dependency manager
		LandingPage landingPage = testContextSetup.pageObjectManager.getLandingPage();
		landingPage.selectTopDeals();
		testContextSetup.genericUtils.switchWindowToChild();
	}

	@Then("validate product name in offers page matches with landing page")
	public void validate_product_name_in_offers_page_mathces_with_landing_page() {
		Assert.assertEquals(offerPageProductName, testContextSetup.landingPageProductName);
	}
}

**************************************************************************************************************
How to run Selenium Cucumber Scenarios parallely with TestNG runner annotations:

modify the TestNGTestRunner class , to run the tests in parallel


@CucumberOptions(features="src/test/java/features",glue="stepDefinitions",monochrome=true)

public class TestNGTestRunner extends AbstractTestNGCucumberTests{

	//we are overriding the scenarios method of AbstractTestNGCucumberTests class 
	@Override
	@DataProvider(parallel=true)
	public Object[][] scenarios(){
		return super.scenarios();
	}
}


**************************************************************************************************************
Assignment - Add new Selenium Feature file to place the product order:


create a feature file , checkout.feature

Feature: Place the order of products

Scenario Outline: Search Experience of Product search in both home and Offers page
Given User is on GreenCart Landing page
When User searched with shortname <Name> and extracted actual name of product
And Added "3" items of the selected product to cart
Then User proceeds to checkout and validate the <Name> items in checkout page
And verify user has ability to enter promo code and place the order 

Examples:
| Name |
| Tom  |


create the page classes , inside the pageObjects package
create a class CheckoutPage

public class CheckoutPage {

	public WebDriver driver;
	
	public CheckoutPage(WebDriver driver) {
		this.driver = driver;
	}
	
	By cartBag = By.cssSelector("[alt='Cart']");
	By checkOutButton = By.xpath("//button[contains(text(),'PROCEED TO CHECKOUT'])");
	By promoBtn = By.cssSelector(".promoBtn");
	By placeOrder = By.xpath("//button[contains(text(),'Place Order')]");
	
	public void CheckoutItems() {
		driver.findElement(cartBag).click();
		driver.findElement(checkOutButton).click();
	}
	
	public boolean verifyPromoBtn() {
		return driver.findElement(promoBtn).isDisplayed();
	}
	
	public boolean verifyPlaceOrder() {
		return driver.findElement(placeOrder).isDisplayed();
	}
}

When ever we create a new Page
create a object of it inside the PageObjectManager

public class PageObjectManager {

	// Factory Design Pattern : we will create objects of all the classes in this
	// class , so called factory design pattern

	public LandingPage landingPage;
	public OffersPage offersPage;
	public WebDriver driver;
	public CheckoutPage checkoutPage;//<------------------

	public PageObjectManager(WebDriver driver) {
		this.driver = driver;
	}

	public LandingPage getLandingPage() {
		landingPage = new LandingPage(driver);
		return landingPage;
	}

	public OffersPage getOffersPage() {
		offersPage = new OffersPage(driver);
		return offersPage;
	}
	
	public CheckoutPage getCheckoutPage() {  //<------------------
		checkoutPage = new CheckoutPage(driver);
		return checkoutPage;
	}
}
create stepDefinition file:

public class CheckoutPageStepDefinition {

	public WebDriver driver;
	public CheckoutPage checkoutPage;
	
	TestContextSetup testContextSetup;
	public CheckoutPageStepDefinition(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
		this.checkoutPage = testContextSetup.pageObjectManager.getCheckoutPage();

	}

	@Then("verify user has ability to enter promo code and place the order")
	public void verify_user_has_ability_to_enter_promo_code_and_place_the_order() {
		Assert.assertTrue(checkoutPage.verifyPromoBtn());
		Assert.assertTrue(checkoutPage.verifyPlaceOrder());
		
	}
	
	@Then("^User proceeds to checkout and validate the (.+) items in checkout page$")
	public void user_proceeds_checkout(String name) throws InterruptedException {
		checkoutPage.CheckoutItems();
		Thread.sleep(4000);
		//Assertion to extract name from screen and compare with name
	}

}


public class LandingPageStepDefinition2 {

	public WebDriver driver;
	public String landingPageProductName;
	LandingPage landingPage;
	
	TestContextSetup testContextSetup;
	public LandingPageStepDefinition2(TestContextSetup testContextSetup) {
		this.testContextSetup = testContextSetup;
		this.landingPage = testContextSetup.pageObjectManager.getLandingPage();
	}

	@Given("User is on GreenCart Landing page")
	public void user_is_on_green_cart_landing_page() {

		Assert.assertTrue(landingPage.getTitleLandingPage().contains("GreenKart"));
	}

	@When("^User searched with shortname (.+) and extracted actual name of product$")
	public void user_searched_with_shortname_and_extracted_actual_name_of_product(String shortName)
			throws InterruptedException {
		

		landingPage.searchItem(shortName);
		
		Thread.sleep(4000);
		testContextSetup.landingPageProductName = landingPage.getProductName().split("-")[0].trim();
		System.out.println(testContextSetup.landingPageProductName + " is extracted from homePage");
	}

	@When("Added {string} items of the selected product to cart")
	public void added_items_of_selected_product_to_cart(String quantity) {
		landingPage.incrementQuantity(Integer.parseInt(quantity));
		landingPage.addToCart();
	}
}

and also make changes in LandingPage , page class
public class LandingPage {
	
	public WebDriver driver;
	public LandingPage(WebDriver driver) {
		this.driver = driver;
	}

	By search = By.xpath("//input[@type='search']");
	By productName = By.cssSelector("h4.product-name");
	By topDeals = By.linkText("Top Deals");
	By increment = By.cssSelector("a.increment");
	By addToCart = By.cssSelector(".product-action button");
	
	public void searchItem(String name) {
		driver.findElement(search).sendKeys(name);
	}
	
	public void getSearchText() {
		driver.findElement(search).getText();
	}
	
	public void incrementQuantity(int quantity) {
		int i = quantity-1;
		while(i>0) {
			driver.findElement(increment).click();
			i--;
		}
	}
	public void addToCart() {
		driver.findElement(addToCart).click();
	}
	
	
	public String getProductName() {
		return driver.findElement(productName).getText();
	}
	
	public void selectTopDeals() {
		driver.findElement(topDeals).click();
	}
	
	public String getTitleLandingPage() {
		return driver.getTitle();
	}
	
}

**************************************************************************************************************
Implementing tagging and run all feature files together in parallel mode:

provide tags in the feature file above the Scenario/Scenario Outline


Feature: Place the order of products

@PlaceOrder  <---------------------------------------------------------------------------------[1]
Scenario Outline: Search Experience of Product search in both home and Offers page
Given User is on GreenCart Landing page
When User searched with shortname <Name> and extracted actual name of product
And Added "3" items of the selected product to cart
Then User proceeds to checkout and validate the <Name> items in checkout page
And verify user has ability to enter promo code and place the order 

Examples:
| Name |
| Tom  |

in TestNGRunner provide the tag

@CucumberOptions(features = "src/test/java/features", glue = "stepDefinitions", monochrome = true, tags = "@PlaceOrder")  <----------------------------------------[2]

public class TestNGTestRunner extends AbstractTestNGCucumberTests {

	// we are overriding the scenarios method of AbstractTestNGCucumberTests class
	@Override
	@DataProvider(parallel = true)
	public Object[][] scenarios() {
		return super.scenarios();
	}
}

when we want to run more than one tag then use tags = "@PlaceOrder or @OffersPage"

****************************************************************************************************************************************************************************************************************************
Different types of reports cucumber framework can generate with examples:

we have html,xml,json,junit,extent reports


to generate html and json reports we can add the plugin  --------------[html , json]

@CucumberOptions(features = "src/test/java/features", glue = "stepDefinitions", monochrome = true,
tags = "@PlaceOrder or @OffersPage" , plugin= {"html:target/cucumber.html","json:target/cucumber.json"})

public class TestNGTestRunner extends AbstractTestNGCucumberTests {

	// we are overriding the scenarios method of AbstractTestNGCucumberTests class
	@Override
	@DataProvider(parallel = true)
	public Object[][] scenarios() {
		return super.scenarios();
	}
}

run the TestNGTestRunner and refresh project
we will get reports inside targets folder --- cucumber.html ,cucumber.json files generated reports


**************************************************************************************************************
How to generate Extent Spark html reports with in Cucumber Selenium Framework

step1: add dependency
add the extent reports dependency , in pom.xml
<dependency>
    <groupId>com.aventstack</groupId>
    <artifactId>extentreports</artifactId>
    <version>5.0.9</version>
</dependency>

search extentreports cucumber7 , and add dependency because extent reports will not directly integrate with cucumber

<dependency>
    <groupId>tech.grasshopper</groupId>
    <artifactId>extentreports-cucumber7-adapter</artifactId>
    <version>1.7.0</version>
</dependency>

Step2: update the runner class
in TestNGRunner class , add the plugin  "com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"

@CucumberOptions(features = "src/test/java/features", glue = "stepDefinitions", monochrome = true, tags = "@PlaceOrder or @OffersPage", plugin = {
		"html:target/cucumber.html", "json:target/cucumber.json",
		"com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:" })
public class TestNGTestRunner extends AbstractTestNGCucumberTests {

	// we are overriding the scenarios method of AbstractTestNGCucumberTests class
	@Override
	@DataProvider(parallel = true)
	public Object[][] scenarios() {
		return super.scenarios();
	}
}


Step3:
inside src/test/resources - create a file extent.properties
basefolder.name=test-output/ExtentReport
basefolder.datetimepattern=d-MMM-YY HH-mm-ss
extent.reporter.spark.start=true
extent.reporter.spark.out=test-output/SparkReport/Spark.html


line1: telling the reports folder path
line2:giving a pattern for folder name , with time stamp
line3:to generate report marking true
line4:a sub folder inside the main folder where reports will be generated and present

run project using testng runner class and refresh project
 

**************************************************************************************************************
Generate automatic screen shot on test failure with code implementation in hooks:

for this we use hooks

@Before, @After - related to scenario
@AfterStep - related to each step of given when then

step1:
add the dependency , to convert File format to byte format use the dependency
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.11.0</version>
</dependency>

step2:
	//we pass parameter Scenario , it has every information about the Scneario that is running
	//it knows scenario name
	@AfterStep
	public void AddScreenshot(Scenario scenario) throws WebDriverException, IOException {
		WebDriver driver = testContextSetup.testBase.WebDriverManager();
		//executes only if any step is failed
		if(scenario.isFailed()) {
			//screenshot
			File sourcePath = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
			byte[] fileContent = FileUtils.readFileToByteArray(sourcePath);
			scenario.attach(fileContent, "image/png", "image");//1st argument - convert file format to byte format
			//so use commons-io dependency 
		}
	}

step3:
inside src/test/resources - extent.properties file add below 2 lines
for the screenshot path 
screenshot.dir=test-output/SparkReport/screenshots
screenshot.rel.path=./screenshots/


now extent.properties look as below:

basefolder.name=test-output/ExtentReport
basefolder.datetimepattern=d-MMM-YY HH-mm-ss
extent.reporter.spark.start=true
extent.reporter.spark.out=test-output/SparkReport/Spark.html
screenshot.dir=test-output/SparkReport/screenshots
screenshot.rel.path=./screenshots/


now run the testNGRunner class and refresh project and see in the test-output folder for the screenshots and the extentreports also has screenshot get
attached
**************************************************************************************************************
How to rerun failed test scenarios with cucumber plugins

step1:
add  a plugin to testng runner class

"rerun:target/failed_scenarios.txt"
step2:
run project and refresh , u will get a .txt file inside target folder
step3:
create a testng runner class and change the path of features
features = "@target/failed_scenarios.txt"

the testng runner class will be as below:
import org.testng.annotations.DataProvider;

import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;

@CucumberOptions(features = "@target/failed_scenarios.txt", glue = "stepDefinitions", monochrome = true, plugin = {
		"html:target/cucumber.html", "json:target/cucumber.json",
		"com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:"})
public class FailedTestRunner extends AbstractTestNGCucumberTests {

	// we are overriding the scenarios method of AbstractTestNGCucumberTests class
	@Override
	@DataProvider(parallel = true)
	public Object[][] scenarios() {
		return super.scenarios();
	}
}




****************************************************************************************************************************************************************************************************************************
Running the cucumber selenium feature files from command line:

From eclipse:

right click on project --> run as ---> go to run configurations ----> select maven build 
----> click on +  icon [new launch configuration]----> u will get a new window opened --->

give the project path[pom.xml must be at project level] , give the goals as test
click on Run


From command line:
go to project path 
cd projectPath

give maven goal
mvn test

*********************************
we can override the existing cucumber options from command line
any parameter we are passing in maven must start with -D

run scenarios that are tagged with @PlaceOrder
mvn test -Dcucumber.filter.tags="@PlaceOrder"

run based on feature file path
mvn test -Dcucumber.features="/Users/../checkout.feature"

************************cucumber website documentation - cucumber.io/docs/cucumber/api/#options *********************************


**************************************************************************************************************
How to pass global properties values through command line to cucumber framework:

we can also control the browser from the commandline


modify TestBase as below
package utils;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class TestBase {

	public WebDriver driver;

	public WebDriver WebDriverManager() throws IOException {

		FileInputStream fis = new FileInputStream(
				System.getProperty("user.dir") + "\\src\\test\\resources\\global.properties");
		Properties properties = new Properties();
		properties.load(fis);
		String url = properties.getProperty("QAUrl");
		String browser_properties = properties.getProperty("browser");
		String browser_maven = System.getProperty("browser");//reads from commandline
		
		//use ternary operator
		String browser = browser_maven != null ? browser_maven : browser_properties;
		
		if (driver == null) {
			if (browser.equalsIgnoreCase("chrome")) {
				WebDriverManager.chromedriver().setup();
				driver = new ChromeDriver();
			} else if (browser.equalsIgnoreCase("edge")) {
				WebDriverManager.edgedriver().setup();
				driver = new EdgeDriver();
			}

			driver.get(url);
		}
		return driver;
	}
}


and thru command line use maven command

mvn test -Dbrowser=edge

**************************************************************************************************************
Jenkins:
download jenkins.war file
go to the jenkins path in command prompt

use the command
java -jar jenkins.war -httpPort=8080

and click on enter

go to localhost:8080 in browser
set username password

**************************************************************************************************************

create new jenkins job

create a new item -- give a name -- select freestyle project
if project is in github , give the git url in the source code management tab
if it is in local , select advanced --> use custom workspace --> provide the project directory path

Build tab
Invoke top level maven targets 
give the goals: test -Dcucumber.filter.tags="@PlaceOrder"
save 

click on BuildNow

then check in console output what happened

**************************************************************************************************************








**************************************************************************************************************




**************************************************************************************************************
